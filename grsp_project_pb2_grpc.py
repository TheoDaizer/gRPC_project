# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grsp_project_pb2 as postgres__test__pb2


class GetDataStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SelectByName = channel.unary_unary(
                '/com.postgtrs_test.grpc.GetData/SelectByName',
                request_serializer=postgres__test__pb2.GetDataRequest.SerializeToString,
                response_deserializer=postgres__test__pb2.GetDatatReply.FromString,
                )
        self.SelectByID = channel.unary_unary(
                '/com.postgtrs_test.grpc.GetData/SelectByID',
                request_serializer=postgres__test__pb2.GetDataRequest.SerializeToString,
                response_deserializer=postgres__test__pb2.GetDatatReply.FromString,
                )
        self.SelectByQuantity = channel.unary_unary(
                '/com.postgtrs_test.grpc.GetData/SelectByQuantity',
                request_serializer=postgres__test__pb2.GetDataRequest.SerializeToString,
                response_deserializer=postgres__test__pb2.GetDatatReply.FromString,
                )


class GetDataServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SelectByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelectByID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelectByQuantity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GetDataServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SelectByName': grpc.unary_unary_rpc_method_handler(
                    servicer.SelectByName,
                    request_deserializer=postgres__test__pb2.GetDataRequest.FromString,
                    response_serializer=postgres__test__pb2.GetDatatReply.SerializeToString,
            ),
            'SelectByID': grpc.unary_unary_rpc_method_handler(
                    servicer.SelectByID,
                    request_deserializer=postgres__test__pb2.GetDataRequest.FromString,
                    response_serializer=postgres__test__pb2.GetDatatReply.SerializeToString,
            ),
            'SelectByQuantity': grpc.unary_unary_rpc_method_handler(
                    servicer.SelectByQuantity,
                    request_deserializer=postgres__test__pb2.GetDataRequest.FromString,
                    response_serializer=postgres__test__pb2.GetDatatReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.postgtrs_test.grpc.GetData', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GetData(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SelectByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.postgtrs_test.grpc.GetData/SelectByName',
            postgres__test__pb2.GetDataRequest.SerializeToString,
            postgres__test__pb2.GetDatatReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SelectByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.postgtrs_test.grpc.GetData/SelectByID',
            postgres__test__pb2.GetDataRequest.SerializeToString,
            postgres__test__pb2.GetDatatReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SelectByQuantity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.postgtrs_test.grpc.GetData/SelectByQuantity',
            postgres__test__pb2.GetDataRequest.SerializeToString,
            postgres__test__pb2.GetDatatReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SetDataStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Insert = channel.unary_unary(
                '/com.postgtrs_test.grpc.SetData/Insert',
                request_serializer=postgres__test__pb2.SetDataRequest.SerializeToString,
                response_deserializer=postgres__test__pb2.SetDataReply.FromString,
                )
        self.Update = channel.unary_unary(
                '/com.postgtrs_test.grpc.SetData/Update',
                request_serializer=postgres__test__pb2.SetDataRequest.SerializeToString,
                response_deserializer=postgres__test__pb2.SetDataReply.FromString,
                )


class SetDataServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Insert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SetDataServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Insert': grpc.unary_unary_rpc_method_handler(
                    servicer.Insert,
                    request_deserializer=postgres__test__pb2.SetDataRequest.FromString,
                    response_serializer=postgres__test__pb2.SetDataReply.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=postgres__test__pb2.SetDataRequest.FromString,
                    response_serializer=postgres__test__pb2.SetDataReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.postgtrs_test.grpc.SetData', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SetData(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Insert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.postgtrs_test.grpc.SetData/Insert',
            postgres__test__pb2.SetDataRequest.SerializeToString,
            postgres__test__pb2.SetDataReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.postgtrs_test.grpc.SetData/Update',
            postgres__test__pb2.SetDataRequest.SerializeToString,
            postgres__test__pb2.SetDataReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
